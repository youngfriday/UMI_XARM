defaults:
  - _self_
  - task: umi

name: train_diffusion_unet_timm
_target_: diffusion_policy.workspace.train_diffusion_unet_image_workspace.TrainDiffusionUnetImageWorkspace

task_name: ${task.name}
shape_meta: ${task.shape_meta}
exp_name: "default"

n_action_steps: 8

policy:
  _target_: diffusion_policy.policy.diffusion_unet_timm_policy.DiffusionUnetTimmPolicy

  shape_meta: ${shape_meta}
  
  noise_scheduler:
    _target_: diffusers.DDIMScheduler
    num_train_timesteps: 50
    beta_start: 0.0001
    beta_end: 0.02
    # beta_schedule is important
    # this is the best we found
    beta_schedule: squaredcos_cap_v2
    clip_sample: True
    set_alpha_to_one: True
    steps_offset: 0
    prediction_type: epsilon # or sample

  obs_encoder:
    _target_: diffusion_policy.model.vision.timm_obs_encoder.TimmObsEncoder
    shape_meta: ${shape_meta}

    ##### from scratch #####
    # model_name: 'vit_base_patch16_224'
    # model_name: 'resnet34'
    # model_name: 'vit_tiny_patch16_224'
    # model_name: 'efficientnet_b0'
    # model_name: 'efficientnet_b3'
    # pretrained: False
    # frozen: False

    ##### from scratch #####
    # model_name: 'resnet34.a1_in1k'
    model_name: 'vit_base_patch16_clip_224.openai'
    # model_name: 'convnext_base.clip_laion2b_augreg_ft_in12k'
    pretrained: True
    frozen: False
    use_lora: False
    lora_rank: 8
    drop_path_rate: 0.0
    
    global_pool: ''

    # 'avg' or 'max' or 'soft_attention' or 'spatial_embedding' or 'transformer' or 'attention_pool_2d'
    # vit: 'cls_token' or 'map'
    feature_aggregation: 'cls_token'
    # feature_aggregation: null
    position_encording: 'sinusoidal' # 'learnable' or 'sinusoidal'. it only works for transformer

    # it only works for resnet. 32 (7x7) or 16 (14x14)
    downsample_ratio: 32

    transforms:
      - type: RandomCrop
        ratio: 0.95
      # RandomRotation is not compatible with BF16
      # - _target_: torchvision.transforms.RandomRotation
      #   degrees:
      #     - -5.0
      #     - 5.0
      #   expand: false
      - _target_: torchvision.transforms.ColorJitter
        brightness: 0.3
        contrast: 0.4
        saturation: 0.5
        hue: 0.08
      # - _target_: torchvision.transforms.RandomPerspective
      #   distortion_scale: 0.5
      #   p: 1.0
      # - _target_: torchvision.transforms.ElasticTransform
      #   alpha: 50.0
      #   sigma: 5.0
      # - _target_: torchvision.transforms.RandomPerspective
      #   distortion_scale: 0.5
      #   p: 1.0
      # - _target_: torchvision.transforms.ElasticTransform
      #   alpha: 50.0
      #   sigma: 5.0
      # - _target_: torchvision.transforms.RandomCrop
      #   size: 192
      

    use_group_norm: True
    share_rgb_model: False
    imagenet_norm: True
    three_augment: False
    fused_model_name: ''

  num_inference_steps: 16
  obs_as_global_cond: True
  diffusion_step_embed_dim: 128
  down_dims: [256,512,1024]
  kernel_size: 5
  n_groups: 8
  cond_predict_scale: True
  input_pertub: 0.1 # reference: https://github.com/forever208/DDPM-IP
  # train multiple diffusion steps per obs encoder forward pass
  # doing this too much will cause instability!
  train_diffusion_n_samples: 1

ema:
  _target_: diffusion_policy.model.diffusion.ema_model.EMAModel
  update_after_step: 0
  inv_gamma: 1.0
  power: 0.75
  min_value: 0.0
  max_value: 0.9999

dataloader:
  batch_size: 64
  num_workers: 8
  shuffle: True
  pin_memory: True
  persistent_workers: True

val_dataloader:
  batch_size: 64
  num_workers: 8
  shuffle: False
  pin_memory: True
  persistent_workers: True

# dataloader:
#   batch_size: 64
#   num_workers: 16
#   shuffle: True
#   pin_memory: True
#   persistent_workers: True

# val_dataloader:
#   batch_size: 64
#   num_workers: 16
#   shuffle: False
#   pin_memory: True
#   persistent_workers: True

optimizer:
  _target_: torch.optim.AdamW
  lr: 3.0e-4
  betas: [0.95, 0.999]
  eps: 1.0e-8
  weight_decay: 1.0e-6
  encoder_weight_decay: 1.0e-6

training:
  device: "cuda:0"
  seed: 42
  debug: False
  resume: False
  # optimization
  lr_scheduler: cosine
  lr_warmup_steps: 2000
  num_epochs: 120
  gradient_accumulate_every: 1
  layer_decay: 1.0
  # EMA destroys performance when used with BatchNorm
  # replace BatchNorm with GroupNorm.
  use_ema: True
  freeze_encoder: False
  # training loop control
  # in epochs
  rollout_every: 10
  checkpoint_every: 10
  val_every: 1
  sample_every: 5
  wild_sample_every: 5
  # steps per epoch
  max_train_steps: null
  max_val_steps: null
  # misc
  tqdm_interval_sec: 1.0
  encoder_lr_coefficient: 0.1
  use_in_the_wild_val: False
  in_the_wild_type: ["seen_object-unseen_env", "unseen_object-seen_env", "unseen_object-unseen_env"]

logging:
  project: umi
  resume: False
  mode: online
  name: ${now:%Y.%m.%d-%H.%M.%S}_${name}_${task_name}
  tags: ["${name}", "${task_name}", "${exp_name}"]
  id: null
  group: null

checkpoint:
  topk:
    monitor_key: train_loss
    mode: min
    k: 5
    format_str: 'epoch={epoch:04d}-train_loss={train_loss:.3f}.ckpt'
  save_last_ckpt: True
  save_last_snapshot: False
  only_save_recent: True

multi_run:
  run_dir: data/outputs/${now:%Y.%m.%d}/${now:%H.%M.%S}_${name}_${task_name}
  wandb_name_base: ${now:%Y.%m.%d-%H.%M.%S}_${name}_${task_name}

hydra:
  job:
    override_dirname: ${name}
  run:
    dir: data/outputs/${now:%Y.%m.%d}/${now:%H.%M.%S}_${name}_${task_name}
  sweep:
    dir: data/outputs/${now:%Y.%m.%d}/${now:%H.%M.%S}_${name}_${task_name}
    subdir: ${hydra.job.num}
